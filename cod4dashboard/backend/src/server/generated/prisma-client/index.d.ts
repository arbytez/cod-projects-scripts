// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  adminPlayer: (where?: AdminPlayerWhereInput) => Promise<boolean>;
  token: (where?: TokenWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  vipPlayer: (where?: VipPlayerWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  adminPlayer: (
    where: AdminPlayerWhereUniqueInput
  ) => AdminPlayerNullablePromise;
  adminPlayers: (args?: {
    where?: AdminPlayerWhereInput;
    orderBy?: AdminPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<AdminPlayer>;
  adminPlayersConnection: (args?: {
    where?: AdminPlayerWhereInput;
    orderBy?: AdminPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdminPlayerConnectionPromise;
  token: (where: TokenWhereUniqueInput) => TokenNullablePromise;
  tokens: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Token>;
  tokensConnection: (args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TokenConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  vipPlayer: (where: VipPlayerWhereUniqueInput) => VipPlayerNullablePromise;
  vipPlayers: (args?: {
    where?: VipPlayerWhereInput;
    orderBy?: VipPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<VipPlayer>;
  vipPlayersConnection: (args?: {
    where?: VipPlayerWhereInput;
    orderBy?: VipPlayerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VipPlayerConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAdminPlayer: (data: AdminPlayerCreateInput) => AdminPlayerPromise;
  updateAdminPlayer: (args: {
    data: AdminPlayerUpdateInput;
    where: AdminPlayerWhereUniqueInput;
  }) => AdminPlayerPromise;
  updateManyAdminPlayers: (args: {
    data: AdminPlayerUpdateManyMutationInput;
    where?: AdminPlayerWhereInput;
  }) => BatchPayloadPromise;
  upsertAdminPlayer: (args: {
    where: AdminPlayerWhereUniqueInput;
    create: AdminPlayerCreateInput;
    update: AdminPlayerUpdateInput;
  }) => AdminPlayerPromise;
  deleteAdminPlayer: (where: AdminPlayerWhereUniqueInput) => AdminPlayerPromise;
  deleteManyAdminPlayers: (
    where?: AdminPlayerWhereInput
  ) => BatchPayloadPromise;
  createToken: (data: TokenCreateInput) => TokenPromise;
  updateToken: (args: {
    data: TokenUpdateInput;
    where: TokenWhereUniqueInput;
  }) => TokenPromise;
  updateManyTokens: (args: {
    data: TokenUpdateManyMutationInput;
    where?: TokenWhereInput;
  }) => BatchPayloadPromise;
  upsertToken: (args: {
    where: TokenWhereUniqueInput;
    create: TokenCreateInput;
    update: TokenUpdateInput;
  }) => TokenPromise;
  deleteToken: (where: TokenWhereUniqueInput) => TokenPromise;
  deleteManyTokens: (where?: TokenWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVipPlayer: (data: VipPlayerCreateInput) => VipPlayerPromise;
  updateVipPlayer: (args: {
    data: VipPlayerUpdateInput;
    where: VipPlayerWhereUniqueInput;
  }) => VipPlayerPromise;
  updateManyVipPlayers: (args: {
    data: VipPlayerUpdateManyMutationInput;
    where?: VipPlayerWhereInput;
  }) => BatchPayloadPromise;
  upsertVipPlayer: (args: {
    where: VipPlayerWhereUniqueInput;
    create: VipPlayerCreateInput;
    update: VipPlayerUpdateInput;
  }) => VipPlayerPromise;
  deleteVipPlayer: (where: VipPlayerWhereUniqueInput) => VipPlayerPromise;
  deleteManyVipPlayers: (where?: VipPlayerWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  adminPlayer: (
    where?: AdminPlayerSubscriptionWhereInput
  ) => AdminPlayerSubscriptionPayloadSubscription;
  token: (
    where?: TokenSubscriptionWhereInput
  ) => TokenSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  vipPlayer: (
    where?: VipPlayerSubscriptionWhereInput
  ) => VipPlayerSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AdminPlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type Role =
  | "ROOT"
  | "ADMIN"
  | "MODERATOR"
  | "VIP"
  | "PLAYER"
  | "ROLEUPDATE";

export type TokenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "content_ASC"
  | "content_DESC"
  | "expiration_ASC"
  | "expiration_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "username_ASC"
  | "username_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiryDate_ASC"
  | "resetTokenExpiryDate_DESC";

export type VipPlayerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AdminPlayerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface AdminPlayerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<AdminPlayerWhereInput[] | AdminPlayerWhereInput>;
}

export type TokenWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  content?: Maybe<String>;
}>;

export interface TokenWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  expiration?: Maybe<DateTimeInput>;
  expiration_not?: Maybe<DateTimeInput>;
  expiration_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiration_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiration_lt?: Maybe<DateTimeInput>;
  expiration_lte?: Maybe<DateTimeInput>;
  expiration_gt?: Maybe<DateTimeInput>;
  expiration_gte?: Maybe<DateTimeInput>;
  user?: Maybe<UserWhereInput>;
  AND?: Maybe<TokenWhereInput[] | TokenWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  username?: Maybe<String>;
  username_not?: Maybe<String>;
  username_in?: Maybe<String[] | String>;
  username_not_in?: Maybe<String[] | String>;
  username_lt?: Maybe<String>;
  username_lte?: Maybe<String>;
  username_gt?: Maybe<String>;
  username_gte?: Maybe<String>;
  username_contains?: Maybe<String>;
  username_not_contains?: Maybe<String>;
  username_starts_with?: Maybe<String>;
  username_not_starts_with?: Maybe<String>;
  username_ends_with?: Maybe<String>;
  username_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  tokens_some?: Maybe<TokenWhereInput>;
  resetToken?: Maybe<String>;
  resetToken_not?: Maybe<String>;
  resetToken_in?: Maybe<String[] | String>;
  resetToken_not_in?: Maybe<String[] | String>;
  resetToken_lt?: Maybe<String>;
  resetToken_lte?: Maybe<String>;
  resetToken_gt?: Maybe<String>;
  resetToken_gte?: Maybe<String>;
  resetToken_contains?: Maybe<String>;
  resetToken_not_contains?: Maybe<String>;
  resetToken_starts_with?: Maybe<String>;
  resetToken_not_starts_with?: Maybe<String>;
  resetToken_ends_with?: Maybe<String>;
  resetToken_not_ends_with?: Maybe<String>;
  resetTokenExpiryDate?: Maybe<DateTimeInput>;
  resetTokenExpiryDate_not?: Maybe<DateTimeInput>;
  resetTokenExpiryDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiryDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  resetTokenExpiryDate_lt?: Maybe<DateTimeInput>;
  resetTokenExpiryDate_lte?: Maybe<DateTimeInput>;
  resetTokenExpiryDate_gt?: Maybe<DateTimeInput>;
  resetTokenExpiryDate_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  username?: Maybe<String>;
  email?: Maybe<String>;
}>;

export type VipPlayerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface VipPlayerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<VipPlayerWhereInput[] | VipPlayerWhereInput>;
}

export interface AdminPlayerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  guids?: Maybe<AdminPlayerCreateguidsInput>;
}

export interface AdminPlayerCreateguidsInput {
  set?: Maybe<String[] | String>;
}

export interface AdminPlayerUpdateInput {
  name?: Maybe<String>;
  guids?: Maybe<AdminPlayerUpdateguidsInput>;
}

export interface AdminPlayerUpdateguidsInput {
  set?: Maybe<String[] | String>;
}

export interface AdminPlayerUpdateManyMutationInput {
  name?: Maybe<String>;
  guids?: Maybe<AdminPlayerUpdateguidsInput>;
}

export interface TokenCreateInput {
  id?: Maybe<ID_Input>;
  content: String;
  expiration: DateTimeInput;
  user: UserCreateOneWithoutTokensInput;
}

export interface UserCreateOneWithoutTokensInput {
  create?: Maybe<UserCreateWithoutTokensInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTokensInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  roles?: Maybe<UserCreaterolesInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiryDate?: Maybe<DateTimeInput>;
}

export interface UserCreaterolesInput {
  set?: Maybe<Role[] | Role>;
}

export interface TokenUpdateInput {
  content?: Maybe<String>;
  expiration?: Maybe<DateTimeInput>;
  user?: Maybe<UserUpdateOneRequiredWithoutTokensInput>;
}

export interface UserUpdateOneRequiredWithoutTokensInput {
  create?: Maybe<UserCreateWithoutTokensInput>;
  update?: Maybe<UserUpdateWithoutTokensDataInput>;
  upsert?: Maybe<UserUpsertWithoutTokensInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTokensDataInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  roles?: Maybe<UserUpdaterolesInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiryDate?: Maybe<DateTimeInput>;
}

export interface UserUpdaterolesInput {
  set?: Maybe<Role[] | Role>;
}

export interface UserUpsertWithoutTokensInput {
  update: UserUpdateWithoutTokensDataInput;
  create: UserCreateWithoutTokensInput;
}

export interface TokenUpdateManyMutationInput {
  content?: Maybe<String>;
  expiration?: Maybe<DateTimeInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  username: String;
  email: String;
  password: String;
  roles?: Maybe<UserCreaterolesInput>;
  tokens?: Maybe<TokenCreateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiryDate?: Maybe<DateTimeInput>;
}

export interface TokenCreateManyWithoutUserInput {
  create?: Maybe<TokenCreateWithoutUserInput[] | TokenCreateWithoutUserInput>;
  connect?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
}

export interface TokenCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  content: String;
  expiration: DateTimeInput;
}

export interface UserUpdateInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  roles?: Maybe<UserUpdaterolesInput>;
  tokens?: Maybe<TokenUpdateManyWithoutUserInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiryDate?: Maybe<DateTimeInput>;
}

export interface TokenUpdateManyWithoutUserInput {
  create?: Maybe<TokenCreateWithoutUserInput[] | TokenCreateWithoutUserInput>;
  delete?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
  connect?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
  set?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
  disconnect?: Maybe<TokenWhereUniqueInput[] | TokenWhereUniqueInput>;
  update?: Maybe<
    | TokenUpdateWithWhereUniqueWithoutUserInput[]
    | TokenUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | TokenUpsertWithWhereUniqueWithoutUserInput[]
    | TokenUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<TokenScalarWhereInput[] | TokenScalarWhereInput>;
  updateMany?: Maybe<
    TokenUpdateManyWithWhereNestedInput[] | TokenUpdateManyWithWhereNestedInput
  >;
}

export interface TokenUpdateWithWhereUniqueWithoutUserInput {
  where: TokenWhereUniqueInput;
  data: TokenUpdateWithoutUserDataInput;
}

export interface TokenUpdateWithoutUserDataInput {
  content?: Maybe<String>;
  expiration?: Maybe<DateTimeInput>;
}

export interface TokenUpsertWithWhereUniqueWithoutUserInput {
  where: TokenWhereUniqueInput;
  update: TokenUpdateWithoutUserDataInput;
  create: TokenCreateWithoutUserInput;
}

export interface TokenScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  expiration?: Maybe<DateTimeInput>;
  expiration_not?: Maybe<DateTimeInput>;
  expiration_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiration_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  expiration_lt?: Maybe<DateTimeInput>;
  expiration_lte?: Maybe<DateTimeInput>;
  expiration_gt?: Maybe<DateTimeInput>;
  expiration_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<TokenScalarWhereInput[] | TokenScalarWhereInput>;
  OR?: Maybe<TokenScalarWhereInput[] | TokenScalarWhereInput>;
  NOT?: Maybe<TokenScalarWhereInput[] | TokenScalarWhereInput>;
}

export interface TokenUpdateManyWithWhereNestedInput {
  where: TokenScalarWhereInput;
  data: TokenUpdateManyDataInput;
}

export interface TokenUpdateManyDataInput {
  content?: Maybe<String>;
  expiration?: Maybe<DateTimeInput>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  roles?: Maybe<UserUpdaterolesInput>;
  resetToken?: Maybe<String>;
  resetTokenExpiryDate?: Maybe<DateTimeInput>;
}

export interface VipPlayerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  guids?: Maybe<VipPlayerCreateguidsInput>;
}

export interface VipPlayerCreateguidsInput {
  set?: Maybe<String[] | String>;
}

export interface VipPlayerUpdateInput {
  name?: Maybe<String>;
  guids?: Maybe<VipPlayerUpdateguidsInput>;
}

export interface VipPlayerUpdateguidsInput {
  set?: Maybe<String[] | String>;
}

export interface VipPlayerUpdateManyMutationInput {
  name?: Maybe<String>;
  guids?: Maybe<VipPlayerUpdateguidsInput>;
}

export interface AdminPlayerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AdminPlayerWhereInput>;
  AND?: Maybe<
    AdminPlayerSubscriptionWhereInput[] | AdminPlayerSubscriptionWhereInput
  >;
}

export interface TokenSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TokenWhereInput>;
  AND?: Maybe<TokenSubscriptionWhereInput[] | TokenSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VipPlayerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VipPlayerWhereInput>;
  AND?: Maybe<
    VipPlayerSubscriptionWhereInput[] | VipPlayerSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface AdminPlayer {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  guids: String[];
}

export interface AdminPlayerPromise extends Promise<AdminPlayer>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  guids: () => Promise<String[]>;
}

export interface AdminPlayerSubscription
  extends Promise<AsyncIterator<AdminPlayer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  guids: () => Promise<AsyncIterator<String[]>>;
}

export interface AdminPlayerNullablePromise
  extends Promise<AdminPlayer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  guids: () => Promise<String[]>;
}

export interface AdminPlayerConnection {
  pageInfo: PageInfo;
  edges: AdminPlayerEdge[];
}

export interface AdminPlayerConnectionPromise
  extends Promise<AdminPlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AdminPlayerEdge>>() => T;
  aggregate: <T = AggregateAdminPlayerPromise>() => T;
}

export interface AdminPlayerConnectionSubscription
  extends Promise<AsyncIterator<AdminPlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AdminPlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAdminPlayerSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AdminPlayerEdge {
  node: AdminPlayer;
  cursor: String;
}

export interface AdminPlayerEdgePromise
  extends Promise<AdminPlayerEdge>,
    Fragmentable {
  node: <T = AdminPlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AdminPlayerEdgeSubscription
  extends Promise<AsyncIterator<AdminPlayerEdge>>,
    Fragmentable {
  node: <T = AdminPlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAdminPlayer {
  count: Int;
}

export interface AggregateAdminPlayerPromise
  extends Promise<AggregateAdminPlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdminPlayerSubscription
  extends Promise<AsyncIterator<AggregateAdminPlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Token {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
  expiration: DateTimeOutput;
}

export interface TokenPromise extends Promise<Token>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  expiration: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface TokenSubscription
  extends Promise<AsyncIterator<Token>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  expiration: () => Promise<AsyncIterator<DateTimeOutput>>;
  user: <T = UserSubscription>() => T;
}

export interface TokenNullablePromise
  extends Promise<Token | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  expiration: () => Promise<DateTimeOutput>;
  user: <T = UserPromise>() => T;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  username: String;
  email: String;
  password: String;
  roles: Role[];
  resetToken?: String;
  resetTokenExpiryDate?: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  roles: () => Promise<Role[]>;
  tokens: <T = FragmentableArray<Token>>(args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpiryDate: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<Role[]>>;
  tokens: <T = Promise<AsyncIterator<TokenSubscription>>>(args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  roles: () => Promise<Role[]>;
  tokens: <T = FragmentableArray<Token>>(args?: {
    where?: TokenWhereInput;
    orderBy?: TokenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  resetToken: () => Promise<String>;
  resetTokenExpiryDate: () => Promise<DateTimeOutput>;
}

export interface TokenConnection {
  pageInfo: PageInfo;
  edges: TokenEdge[];
}

export interface TokenConnectionPromise
  extends Promise<TokenConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TokenEdge>>() => T;
  aggregate: <T = AggregateTokenPromise>() => T;
}

export interface TokenConnectionSubscription
  extends Promise<AsyncIterator<TokenConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TokenEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTokenSubscription>() => T;
}

export interface TokenEdge {
  node: Token;
  cursor: String;
}

export interface TokenEdgePromise extends Promise<TokenEdge>, Fragmentable {
  node: <T = TokenPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TokenEdgeSubscription
  extends Promise<AsyncIterator<TokenEdge>>,
    Fragmentable {
  node: <T = TokenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateToken {
  count: Int;
}

export interface AggregateTokenPromise
  extends Promise<AggregateToken>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTokenSubscription
  extends Promise<AsyncIterator<AggregateToken>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VipPlayer {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  guids: String[];
}

export interface VipPlayerPromise extends Promise<VipPlayer>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  guids: () => Promise<String[]>;
}

export interface VipPlayerSubscription
  extends Promise<AsyncIterator<VipPlayer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  guids: () => Promise<AsyncIterator<String[]>>;
}

export interface VipPlayerNullablePromise
  extends Promise<VipPlayer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  guids: () => Promise<String[]>;
}

export interface VipPlayerConnection {
  pageInfo: PageInfo;
  edges: VipPlayerEdge[];
}

export interface VipPlayerConnectionPromise
  extends Promise<VipPlayerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VipPlayerEdge>>() => T;
  aggregate: <T = AggregateVipPlayerPromise>() => T;
}

export interface VipPlayerConnectionSubscription
  extends Promise<AsyncIterator<VipPlayerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VipPlayerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVipPlayerSubscription>() => T;
}

export interface VipPlayerEdge {
  node: VipPlayer;
  cursor: String;
}

export interface VipPlayerEdgePromise
  extends Promise<VipPlayerEdge>,
    Fragmentable {
  node: <T = VipPlayerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VipPlayerEdgeSubscription
  extends Promise<AsyncIterator<VipPlayerEdge>>,
    Fragmentable {
  node: <T = VipPlayerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVipPlayer {
  count: Int;
}

export interface AggregateVipPlayerPromise
  extends Promise<AggregateVipPlayer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVipPlayerSubscription
  extends Promise<AsyncIterator<AggregateVipPlayer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AdminPlayerSubscriptionPayload {
  mutation: MutationType;
  node: AdminPlayer;
  updatedFields: String[];
  previousValues: AdminPlayerPreviousValues;
}

export interface AdminPlayerSubscriptionPayloadPromise
  extends Promise<AdminPlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AdminPlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdminPlayerPreviousValuesPromise>() => T;
}

export interface AdminPlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdminPlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdminPlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdminPlayerPreviousValuesSubscription>() => T;
}

export interface AdminPlayerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  guids: String[];
}

export interface AdminPlayerPreviousValuesPromise
  extends Promise<AdminPlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  guids: () => Promise<String[]>;
}

export interface AdminPlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<AdminPlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  guids: () => Promise<AsyncIterator<String[]>>;
}

export interface TokenSubscriptionPayload {
  mutation: MutationType;
  node: Token;
  updatedFields: String[];
  previousValues: TokenPreviousValues;
}

export interface TokenSubscriptionPayloadPromise
  extends Promise<TokenSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TokenPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TokenPreviousValuesPromise>() => T;
}

export interface TokenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TokenSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TokenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TokenPreviousValuesSubscription>() => T;
}

export interface TokenPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  content: String;
  expiration: DateTimeOutput;
}

export interface TokenPreviousValuesPromise
  extends Promise<TokenPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  content: () => Promise<String>;
  expiration: () => Promise<DateTimeOutput>;
}

export interface TokenPreviousValuesSubscription
  extends Promise<AsyncIterator<TokenPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  content: () => Promise<AsyncIterator<String>>;
  expiration: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  username: String;
  email: String;
  password: String;
  roles: Role[];
  resetToken?: String;
  resetTokenExpiryDate?: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  username: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  roles: () => Promise<Role[]>;
  resetToken: () => Promise<String>;
  resetTokenExpiryDate: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  username: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  roles: () => Promise<AsyncIterator<Role[]>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiryDate: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VipPlayerSubscriptionPayload {
  mutation: MutationType;
  node: VipPlayer;
  updatedFields: String[];
  previousValues: VipPlayerPreviousValues;
}

export interface VipPlayerSubscriptionPayloadPromise
  extends Promise<VipPlayerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VipPlayerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VipPlayerPreviousValuesPromise>() => T;
}

export interface VipPlayerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VipPlayerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VipPlayerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VipPlayerPreviousValuesSubscription>() => T;
}

export interface VipPlayerPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  guids: String[];
}

export interface VipPlayerPreviousValuesPromise
  extends Promise<VipPlayerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  guids: () => Promise<String[]>;
}

export interface VipPlayerPreviousValuesSubscription
  extends Promise<AsyncIterator<VipPlayerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  guids: () => Promise<AsyncIterator<String[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Role",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Token",
    embedded: false
  },
  {
    name: "AdminPlayer",
    embedded: false
  },
  {
    name: "VipPlayer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
