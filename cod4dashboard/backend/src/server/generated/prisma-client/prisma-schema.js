module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AdminPlayer {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  guids: [String!]!
}

type AdminPlayerConnection {
  pageInfo: PageInfo!
  edges: [AdminPlayerEdge]!
  aggregate: AggregateAdminPlayer!
}

input AdminPlayerCreateguidsInput {
  set: [String!]
}

input AdminPlayerCreateInput {
  id: ID
  name: String!
  guids: AdminPlayerCreateguidsInput
}

type AdminPlayerEdge {
  node: AdminPlayer!
  cursor: String!
}

enum AdminPlayerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type AdminPlayerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  guids: [String!]!
}

type AdminPlayerSubscriptionPayload {
  mutation: MutationType!
  node: AdminPlayer
  updatedFields: [String!]
  previousValues: AdminPlayerPreviousValues
}

input AdminPlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AdminPlayerWhereInput
  AND: [AdminPlayerSubscriptionWhereInput!]
}

input AdminPlayerUpdateguidsInput {
  set: [String!]
}

input AdminPlayerUpdateInput {
  name: String
  guids: AdminPlayerUpdateguidsInput
}

input AdminPlayerUpdateManyMutationInput {
  name: String
  guids: AdminPlayerUpdateguidsInput
}

input AdminPlayerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [AdminPlayerWhereInput!]
}

input AdminPlayerWhereUniqueInput {
  id: ID
  name: String
}

type AggregateAdminPlayer {
  count: Int!
}

type AggregateToken {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVipPlayer {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createAdminPlayer(data: AdminPlayerCreateInput!): AdminPlayer!
  updateAdminPlayer(data: AdminPlayerUpdateInput!, where: AdminPlayerWhereUniqueInput!): AdminPlayer
  updateManyAdminPlayers(data: AdminPlayerUpdateManyMutationInput!, where: AdminPlayerWhereInput): BatchPayload!
  upsertAdminPlayer(where: AdminPlayerWhereUniqueInput!, create: AdminPlayerCreateInput!, update: AdminPlayerUpdateInput!): AdminPlayer!
  deleteAdminPlayer(where: AdminPlayerWhereUniqueInput!): AdminPlayer
  deleteManyAdminPlayers(where: AdminPlayerWhereInput): BatchPayload!
  createToken(data: TokenCreateInput!): Token!
  updateToken(data: TokenUpdateInput!, where: TokenWhereUniqueInput!): Token
  updateManyTokens(data: TokenUpdateManyMutationInput!, where: TokenWhereInput): BatchPayload!
  upsertToken(where: TokenWhereUniqueInput!, create: TokenCreateInput!, update: TokenUpdateInput!): Token!
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteManyTokens(where: TokenWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createVipPlayer(data: VipPlayerCreateInput!): VipPlayer!
  updateVipPlayer(data: VipPlayerUpdateInput!, where: VipPlayerWhereUniqueInput!): VipPlayer
  updateManyVipPlayers(data: VipPlayerUpdateManyMutationInput!, where: VipPlayerWhereInput): BatchPayload!
  upsertVipPlayer(where: VipPlayerWhereUniqueInput!, create: VipPlayerCreateInput!, update: VipPlayerUpdateInput!): VipPlayer!
  deleteVipPlayer(where: VipPlayerWhereUniqueInput!): VipPlayer
  deleteManyVipPlayers(where: VipPlayerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  adminPlayer(where: AdminPlayerWhereUniqueInput!): AdminPlayer
  adminPlayers(where: AdminPlayerWhereInput, orderBy: AdminPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminPlayer]!
  adminPlayersConnection(where: AdminPlayerWhereInput, orderBy: AdminPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminPlayerConnection!
  token(where: TokenWhereUniqueInput!): Token
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token]!
  tokensConnection(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TokenConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  vipPlayer(where: VipPlayerWhereUniqueInput!): VipPlayer
  vipPlayers(where: VipPlayerWhereInput, orderBy: VipPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VipPlayer]!
  vipPlayersConnection(where: VipPlayerWhereInput, orderBy: VipPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VipPlayerConnection!
  node(id: ID!): Node
}

enum Role {
  ROOT
  ADMIN
  MODERATOR
  VIP
  PLAYER
  ROLEUPDATE
}

type Subscription {
  adminPlayer(where: AdminPlayerSubscriptionWhereInput): AdminPlayerSubscriptionPayload
  token(where: TokenSubscriptionWhereInput): TokenSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  vipPlayer(where: VipPlayerSubscriptionWhereInput): VipPlayerSubscriptionPayload
}

type Token {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  expiration: DateTime!
  user: User!
}

type TokenConnection {
  pageInfo: PageInfo!
  edges: [TokenEdge]!
  aggregate: AggregateToken!
}

input TokenCreateInput {
  id: ID
  content: String!
  expiration: DateTime!
  user: UserCreateOneWithoutTokensInput!
}

input TokenCreateManyWithoutUserInput {
  create: [TokenCreateWithoutUserInput!]
  connect: [TokenWhereUniqueInput!]
}

input TokenCreateWithoutUserInput {
  id: ID
  content: String!
  expiration: DateTime!
}

type TokenEdge {
  node: Token!
  cursor: String!
}

enum TokenOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
  expiration_ASC
  expiration_DESC
}

type TokenPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  expiration: DateTime!
}

input TokenScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  expiration: DateTime
  expiration_not: DateTime
  expiration_in: [DateTime!]
  expiration_not_in: [DateTime!]
  expiration_lt: DateTime
  expiration_lte: DateTime
  expiration_gt: DateTime
  expiration_gte: DateTime
  AND: [TokenScalarWhereInput!]
  OR: [TokenScalarWhereInput!]
  NOT: [TokenScalarWhereInput!]
}

type TokenSubscriptionPayload {
  mutation: MutationType!
  node: Token
  updatedFields: [String!]
  previousValues: TokenPreviousValues
}

input TokenSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TokenWhereInput
  AND: [TokenSubscriptionWhereInput!]
}

input TokenUpdateInput {
  content: String
  expiration: DateTime
  user: UserUpdateOneRequiredWithoutTokensInput
}

input TokenUpdateManyDataInput {
  content: String
  expiration: DateTime
}

input TokenUpdateManyMutationInput {
  content: String
  expiration: DateTime
}

input TokenUpdateManyWithoutUserInput {
  create: [TokenCreateWithoutUserInput!]
  delete: [TokenWhereUniqueInput!]
  connect: [TokenWhereUniqueInput!]
  set: [TokenWhereUniqueInput!]
  disconnect: [TokenWhereUniqueInput!]
  update: [TokenUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [TokenUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [TokenScalarWhereInput!]
  updateMany: [TokenUpdateManyWithWhereNestedInput!]
}

input TokenUpdateManyWithWhereNestedInput {
  where: TokenScalarWhereInput!
  data: TokenUpdateManyDataInput!
}

input TokenUpdateWithoutUserDataInput {
  content: String
  expiration: DateTime
}

input TokenUpdateWithWhereUniqueWithoutUserInput {
  where: TokenWhereUniqueInput!
  data: TokenUpdateWithoutUserDataInput!
}

input TokenUpsertWithWhereUniqueWithoutUserInput {
  where: TokenWhereUniqueInput!
  update: TokenUpdateWithoutUserDataInput!
  create: TokenCreateWithoutUserInput!
}

input TokenWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  expiration: DateTime
  expiration_not: DateTime
  expiration_in: [DateTime!]
  expiration_not_in: [DateTime!]
  expiration_lt: DateTime
  expiration_lte: DateTime
  expiration_gt: DateTime
  expiration_gte: DateTime
  user: UserWhereInput
  AND: [TokenWhereInput!]
}

input TokenWhereUniqueInput {
  id: ID
  content: String
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  password: String!
  roles: [Role!]!
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token!]
  resetToken: String
  resetTokenExpiryDate: DateTime
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  password: String!
  roles: UserCreaterolesInput
  tokens: TokenCreateManyWithoutUserInput
  resetToken: String
  resetTokenExpiryDate: DateTime
}

input UserCreateOneWithoutTokensInput {
  create: UserCreateWithoutTokensInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [Role!]
}

input UserCreateWithoutTokensInput {
  id: ID
  username: String!
  email: String!
  password: String!
  roles: UserCreaterolesInput
  resetToken: String
  resetTokenExpiryDate: DateTime
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiryDate_ASC
  resetTokenExpiryDate_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  password: String!
  roles: [Role!]!
  resetToken: String
  resetTokenExpiryDate: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  roles: UserUpdaterolesInput
  tokens: TokenUpdateManyWithoutUserInput
  resetToken: String
  resetTokenExpiryDate: DateTime
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
  roles: UserUpdaterolesInput
  resetToken: String
  resetTokenExpiryDate: DateTime
}

input UserUpdateOneRequiredWithoutTokensInput {
  create: UserCreateWithoutTokensInput
  update: UserUpdateWithoutTokensDataInput
  upsert: UserUpsertWithoutTokensInput
  connect: UserWhereUniqueInput
}

input UserUpdaterolesInput {
  set: [Role!]
}

input UserUpdateWithoutTokensDataInput {
  username: String
  email: String
  password: String
  roles: UserUpdaterolesInput
  resetToken: String
  resetTokenExpiryDate: DateTime
}

input UserUpsertWithoutTokensInput {
  update: UserUpdateWithoutTokensDataInput!
  create: UserCreateWithoutTokensInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  tokens_some: TokenWhereInput
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiryDate: DateTime
  resetTokenExpiryDate_not: DateTime
  resetTokenExpiryDate_in: [DateTime!]
  resetTokenExpiryDate_not_in: [DateTime!]
  resetTokenExpiryDate_lt: DateTime
  resetTokenExpiryDate_lte: DateTime
  resetTokenExpiryDate_gt: DateTime
  resetTokenExpiryDate_gte: DateTime
  AND: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

type VipPlayer {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  guids: [String!]!
}

type VipPlayerConnection {
  pageInfo: PageInfo!
  edges: [VipPlayerEdge]!
  aggregate: AggregateVipPlayer!
}

input VipPlayerCreateguidsInput {
  set: [String!]
}

input VipPlayerCreateInput {
  id: ID
  name: String!
  guids: VipPlayerCreateguidsInput
}

type VipPlayerEdge {
  node: VipPlayer!
  cursor: String!
}

enum VipPlayerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type VipPlayerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  guids: [String!]!
}

type VipPlayerSubscriptionPayload {
  mutation: MutationType!
  node: VipPlayer
  updatedFields: [String!]
  previousValues: VipPlayerPreviousValues
}

input VipPlayerSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: VipPlayerWhereInput
  AND: [VipPlayerSubscriptionWhereInput!]
}

input VipPlayerUpdateguidsInput {
  set: [String!]
}

input VipPlayerUpdateInput {
  name: String
  guids: VipPlayerUpdateguidsInput
}

input VipPlayerUpdateManyMutationInput {
  name: String
  guids: VipPlayerUpdateguidsInput
}

input VipPlayerWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [VipPlayerWhereInput!]
}

input VipPlayerWhereUniqueInput {
  id: ID
  name: String
}
`
      }
    