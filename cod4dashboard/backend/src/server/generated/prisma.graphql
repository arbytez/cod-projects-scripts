# source: https://prisma-1.epbe.dynu.net/prisma-cod4dashboard/dev
# timestamp: Mon Oct 14 2019 13:44:08 GMT+0200 (GMT+02:00)

type AdminPlayer implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  guids: [String!]!
}

"""A connection to a list of items."""
type AdminPlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AdminPlayerEdge]!
  aggregate: AggregateAdminPlayer!
}

input AdminPlayerCreateguidsInput {
  set: [String!]
}

input AdminPlayerCreateInput {
  id: ID
  name: String!
  guids: AdminPlayerCreateguidsInput
}

"""An edge in a connection."""
type AdminPlayerEdge {
  """The item at the end of the edge."""
  node: AdminPlayer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AdminPlayerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type AdminPlayerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  guids: [String!]!
}

type AdminPlayerSubscriptionPayload {
  mutation: MutationType!
  node: AdminPlayer
  updatedFields: [String!]
  previousValues: AdminPlayerPreviousValues
}

input AdminPlayerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminPlayerSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AdminPlayerWhereInput
}

input AdminPlayerUpdateguidsInput {
  set: [String!]
}

input AdminPlayerUpdateInput {
  name: String
  guids: AdminPlayerUpdateguidsInput
}

input AdminPlayerUpdateManyMutationInput {
  name: String
  guids: AdminPlayerUpdateguidsInput
}

input AdminPlayerWhereInput {
  """Logical AND on all given filters."""
  AND: [AdminPlayerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input AdminPlayerWhereUniqueInput {
  id: ID
  name: String
}

type AggregateAdminPlayer {
  count: Int!
}

type AggregateToken {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVipPlayer {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createToken(data: TokenCreateInput!): Token!
  createAdminPlayer(data: AdminPlayerCreateInput!): AdminPlayer!
  createVipPlayer(data: VipPlayerCreateInput!): VipPlayer!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateToken(data: TokenUpdateInput!, where: TokenWhereUniqueInput!): Token
  updateAdminPlayer(data: AdminPlayerUpdateInput!, where: AdminPlayerWhereUniqueInput!): AdminPlayer
  updateVipPlayer(data: VipPlayerUpdateInput!, where: VipPlayerWhereUniqueInput!): VipPlayer
  deleteUser(where: UserWhereUniqueInput!): User
  deleteToken(where: TokenWhereUniqueInput!): Token
  deleteAdminPlayer(where: AdminPlayerWhereUniqueInput!): AdminPlayer
  deleteVipPlayer(where: VipPlayerWhereUniqueInput!): VipPlayer
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertToken(where: TokenWhereUniqueInput!, create: TokenCreateInput!, update: TokenUpdateInput!): Token!
  upsertAdminPlayer(where: AdminPlayerWhereUniqueInput!, create: AdminPlayerCreateInput!, update: AdminPlayerUpdateInput!): AdminPlayer!
  upsertVipPlayer(where: VipPlayerWhereUniqueInput!, create: VipPlayerCreateInput!, update: VipPlayerUpdateInput!): VipPlayer!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyTokens(data: TokenUpdateManyMutationInput!, where: TokenWhereInput): BatchPayload!
  updateManyAdminPlayers(data: AdminPlayerUpdateManyMutationInput!, where: AdminPlayerWhereInput): BatchPayload!
  updateManyVipPlayers(data: VipPlayerUpdateManyMutationInput!, where: VipPlayerWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTokens(where: TokenWhereInput): BatchPayload!
  deleteManyAdminPlayers(where: AdminPlayerWhereInput): BatchPayload!
  deleteManyVipPlayers(where: VipPlayerWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token]!
  adminPlayers(where: AdminPlayerWhereInput, orderBy: AdminPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AdminPlayer]!
  vipPlayers(where: VipPlayerWhereInput, orderBy: VipPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VipPlayer]!
  user(where: UserWhereUniqueInput!): User
  token(where: TokenWhereUniqueInput!): Token
  adminPlayer(where: AdminPlayerWhereUniqueInput!): AdminPlayer
  vipPlayer(where: VipPlayerWhereUniqueInput!): VipPlayer
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  tokensConnection(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TokenConnection!
  adminPlayersConnection(where: AdminPlayerWhereInput, orderBy: AdminPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AdminPlayerConnection!
  vipPlayersConnection(where: VipPlayerWhereInput, orderBy: VipPlayerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VipPlayerConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

enum Role {
  ROOT
  ADMIN
  MODERATOR
  VIP
  PLAYER
  ROLEUPDATE
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  token(where: TokenSubscriptionWhereInput): TokenSubscriptionPayload
  adminPlayer(where: AdminPlayerSubscriptionWhereInput): AdminPlayerSubscriptionPayload
  vipPlayer(where: VipPlayerSubscriptionWhereInput): VipPlayerSubscriptionPayload
}

type Token implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  expiration: DateTime!
  user: User!
}

"""A connection to a list of items."""
type TokenConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TokenEdge]!
  aggregate: AggregateToken!
}

input TokenCreateInput {
  id: ID
  content: String!
  expiration: DateTime!
  user: UserCreateOneWithoutTokensInput!
}

input TokenCreateManyWithoutUserInput {
  create: [TokenCreateWithoutUserInput!]
  connect: [TokenWhereUniqueInput!]
}

input TokenCreateWithoutUserInput {
  id: ID
  content: String!
  expiration: DateTime!
}

"""An edge in a connection."""
type TokenEdge {
  """The item at the end of the edge."""
  node: Token!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TokenOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  content_ASC
  content_DESC
  expiration_ASC
  expiration_DESC
}

type TokenPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  expiration: DateTime!
}

input TokenScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [TokenScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [TokenScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TokenScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  expiration: DateTime

  """All values that are not equal to given value."""
  expiration_not: DateTime

  """All values that are contained in given list."""
  expiration_in: [DateTime!]

  """All values that are not contained in given list."""
  expiration_not_in: [DateTime!]

  """All values less than the given value."""
  expiration_lt: DateTime

  """All values less than or equal the given value."""
  expiration_lte: DateTime

  """All values greater than the given value."""
  expiration_gt: DateTime

  """All values greater than or equal the given value."""
  expiration_gte: DateTime
}

type TokenSubscriptionPayload {
  mutation: MutationType!
  node: Token
  updatedFields: [String!]
  previousValues: TokenPreviousValues
}

input TokenSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TokenSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TokenWhereInput
}

input TokenUpdateInput {
  content: String
  expiration: DateTime
  user: UserUpdateOneRequiredWithoutTokensInput
}

input TokenUpdateManyDataInput {
  content: String
  expiration: DateTime
}

input TokenUpdateManyMutationInput {
  content: String
  expiration: DateTime
}

input TokenUpdateManyWithoutUserInput {
  create: [TokenCreateWithoutUserInput!]
  connect: [TokenWhereUniqueInput!]
  set: [TokenWhereUniqueInput!]
  disconnect: [TokenWhereUniqueInput!]
  delete: [TokenWhereUniqueInput!]
  update: [TokenUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [TokenUpdateManyWithWhereNestedInput!]
  deleteMany: [TokenScalarWhereInput!]
  upsert: [TokenUpsertWithWhereUniqueWithoutUserInput!]
}

input TokenUpdateManyWithWhereNestedInput {
  where: TokenScalarWhereInput!
  data: TokenUpdateManyDataInput!
}

input TokenUpdateWithoutUserDataInput {
  content: String
  expiration: DateTime
}

input TokenUpdateWithWhereUniqueWithoutUserInput {
  where: TokenWhereUniqueInput!
  data: TokenUpdateWithoutUserDataInput!
}

input TokenUpsertWithWhereUniqueWithoutUserInput {
  where: TokenWhereUniqueInput!
  update: TokenUpdateWithoutUserDataInput!
  create: TokenCreateWithoutUserInput!
}

input TokenWhereInput {
  """Logical AND on all given filters."""
  AND: [TokenWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  expiration: DateTime

  """All values that are not equal to given value."""
  expiration_not: DateTime

  """All values that are contained in given list."""
  expiration_in: [DateTime!]

  """All values that are not contained in given list."""
  expiration_not_in: [DateTime!]

  """All values less than the given value."""
  expiration_lt: DateTime

  """All values less than or equal the given value."""
  expiration_lte: DateTime

  """All values greater than the given value."""
  expiration_gt: DateTime

  """All values greater than or equal the given value."""
  expiration_gte: DateTime
  user: UserWhereInput
}

input TokenWhereUniqueInput {
  id: ID
  content: String
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  password: String!
  roles: [Role!]!
  tokens(where: TokenWhereInput, orderBy: TokenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Token!]
  resetToken: String
  resetTokenExpiryDate: DateTime
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  username: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiryDate: DateTime
  roles: UserCreaterolesInput
  tokens: TokenCreateManyWithoutUserInput
}

input UserCreateOneWithoutTokensInput {
  create: UserCreateWithoutTokensInput
  connect: UserWhereUniqueInput
}

input UserCreaterolesInput {
  set: [Role!]
}

input UserCreateWithoutTokensInput {
  id: ID
  username: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiryDate: DateTime
  roles: UserCreaterolesInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiryDate_ASC
  resetTokenExpiryDate_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String!
  email: String!
  password: String!
  roles: [Role!]!
  resetToken: String
  resetTokenExpiryDate: DateTime
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiryDate: DateTime
  roles: UserUpdaterolesInput
  tokens: TokenUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiryDate: DateTime
  roles: UserUpdaterolesInput
}

input UserUpdateOneRequiredWithoutTokensInput {
  create: UserCreateWithoutTokensInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutTokensDataInput
  upsert: UserUpsertWithoutTokensInput
}

input UserUpdaterolesInput {
  set: [Role!]
}

input UserUpdateWithoutTokensDataInput {
  username: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiryDate: DateTime
  roles: UserUpdaterolesInput
}

input UserUpsertWithoutTokensInput {
  update: UserUpdateWithoutTokensDataInput!
  create: UserCreateWithoutTokensInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiryDate: DateTime

  """All values that are not equal to given value."""
  resetTokenExpiryDate_not: DateTime

  """All values that are contained in given list."""
  resetTokenExpiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  resetTokenExpiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  resetTokenExpiryDate_lt: DateTime

  """All values less than or equal the given value."""
  resetTokenExpiryDate_lte: DateTime

  """All values greater than the given value."""
  resetTokenExpiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  resetTokenExpiryDate_gte: DateTime
  tokens_some: TokenWhereInput
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

type VipPlayer implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  guids: [String!]!
}

"""A connection to a list of items."""
type VipPlayerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VipPlayerEdge]!
  aggregate: AggregateVipPlayer!
}

input VipPlayerCreateguidsInput {
  set: [String!]
}

input VipPlayerCreateInput {
  id: ID
  name: String!
  guids: VipPlayerCreateguidsInput
}

"""An edge in a connection."""
type VipPlayerEdge {
  """The item at the end of the edge."""
  node: VipPlayer!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VipPlayerOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type VipPlayerPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  guids: [String!]!
}

type VipPlayerSubscriptionPayload {
  mutation: MutationType!
  node: VipPlayer
  updatedFields: [String!]
  previousValues: VipPlayerPreviousValues
}

input VipPlayerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VipPlayerSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VipPlayerWhereInput
}

input VipPlayerUpdateguidsInput {
  set: [String!]
}

input VipPlayerUpdateInput {
  name: String
  guids: VipPlayerUpdateguidsInput
}

input VipPlayerUpdateManyMutationInput {
  name: String
  guids: VipPlayerUpdateguidsInput
}

input VipPlayerWhereInput {
  """Logical AND on all given filters."""
  AND: [VipPlayerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

input VipPlayerWhereUniqueInput {
  id: ID
  name: String
}
